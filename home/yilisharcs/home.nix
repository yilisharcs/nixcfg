# This is a default home.nix generated by the follwing hone-manager command
#
# home-manager init ./

{ config, lib, pkgs, ... }:

{
  # Home Manager needs a bit of information about you and the paths it should
  # manage.
  home.username = lib.mkDefault "yilisharcs";
  home.homeDirectory = lib.mkDefault "/home/${config.home.username}";

  # This value determines the Home Manager release that your configuration is
  # compatible with. This helps avoid breakage when a new Home Manager release
  # introduces backwards incompatible changes.
  #
  # You should not change this value, even if you update Home Manager. If you do
  # want to update the value, then make sure to first check the Home Manager
  # release notes.
  home.stateVersion = "24.11"; # Please read the comment before changing.

  programs = {

# I might be able to configure brave with chromium

# programs.gnupg.agent, ssh.agent

    # # automatic invocation of shell.nix with .envrc
    # direnv = {
    #   enable = true;
    #   # enableBashIntegration = true;
    #   # loadInNixShell = true;
    #   nix-direnv.enable = true;
    # };

    # distributed version control system
    git = {
      enable = true;
      userName = "yilisharcs";
      userEmail = "yilisharcs@gmail.com";
      aliases = {
        graph = "log --decorate --oneline --graph";
        last = "log -1 HEAD";
        unstage = "reset HEAD --";
      };
      ignores = [
        ".env"
        "/blueprint"
      ];
    };

    nushell = {
      enable = true;
      environmentVariables = {
        GREETING = "hello world";
      };
      plugins = with pkgs.nushellPlugins; [
        gstat
        highlight #regex
        query
        # skim  ### NOTE: these seem to be outdated
        # units ### NOTE: mismatched versions
      ];
      settings = {
        show_banner = false;
        buffer_editor = "nvim";
        history = {
          file_format = "plaintext";
          max_size = 10000000;
          sync_on_enter = true;
          isolation = false;
        };
        plugin_gc = {
          default = {
            enabled = true;
            # stop_after = "10sec";
          };
          # plugins = {
          #   gstat.stop_after = 1min;
          #   inc.stop_after = 0sec;
          # };
        };
        # keybindings = {
        #   # {
        #   #   name = "tmux_sessionizer";
        #   #   modifier = "control";
        #   #   keycode = "char_g";
        #   #   mode = [ "emacs", "vi_insert", "vi_normat" ];
        #   #   event = {
        #   #     send = "executehostcommand";
        #   #     cmd = "tmux-sessionizer";
        #   #   };
        #   # };
        #   {
        #     name = "job_to_foreground";
        #     modifier = "control";
        #     keycode = "char_z";
        #     mode = [ "emacs", "vi_insert", "vi_normal" ];
        #     event = {
        #       send = "executehostcommand";
        #       cmd = "job unfreeze";
        #     };
        #   };
        # };
      };
      shellAliases = {
        # muscle memory
        vi = "nvim";
        vim = "nvim";
        ":q" = "exit";

        # convenience
        fetch = "fastfetch";
        nsp = "nix search nixpkgs";
        pomo = "porsmo";
        speedtest = "speedtest-rs";
        # wiki = "wiki-tui";

        # # nushell scripts
        # gitcon = "gitcon.nu";
        # gitlist = "gstat.nu";
        # tokeicon = "tokeicon.nu";
      };
    };

    # fuzzy finder
    skim = {
      enable = true;
      # FIXME: none of these options are working
      defaultCommand = "fd --color=never --hidden --follow --type f --type l --exclude .git";
      defaultOptions = [
        "--preview 'bat {} --color=always --wrap=never --style=plain --line-range=:500'"
        "--layout=reverse"
        "--multi"
        "--bind='ctrl-j:preview-page-down'"
        "--bind='ctrl-k:preview-page-up'"
        "--bind='ctrl-h:backward-char+delete-charEOF'"
        "--bind='F4:toggle-preview'"
      ];
    };

    # multishell prompt engine
    starship = {
      enable = true;
      enableNushellIntegration = true;
      settings = {
        add_newline = false;
        command_timeout = 300;
        character = {
          success_symbol = "[➜](bold green)";
          error_symbol = "[➜](bold red)";
        };
        git_status = {
          format = lib.concatStrings [
            "([\\["
            "$all_status"
            "$ahead_behind"
            "\\]]("
            "$style"
            ") )"
          ];
          deleted = "[✕](italic red)";
        };
        package.format = "(is [󰏗 $version]($style) )";
      };
    };

    tmux = {
      enable = true;
      focusEvents = true;
      mouse = true;
    };

    yt-dlp = {
      enable = true;
      settings = {
        extract-audio = true;
        no-mtime = true;
        no-playlist = true;
      };
      extraConfig = ''
        -o ~/YouTube/%(title)s.%(ext)s
        -f bv*[height<=?1080]+ba/best
      '';
    };

    # zettelkasten helper
    zk = {
      enable = true;
      settings = {
        notebook = {
          dir = "~/notebook";
        };
        note = {
          language = "en";
          default-title = "Untitled";
          filename = "{{id}}-{{slug title}}";
          extension = "md";
          template = "default.md";
          id-charset = "hex";
          id-length = 7;
          id-case = "lower";
        };
        extra = {
          author = "以利沙";
        };
        group.journal = {
          paths = ["journal/weekly" "journal/daily"];
          note.filename = "{{format-date now}}";
        };
        format.markdown = {
          hashtags = false;
          colon-tags = false;
          multiword-tags = true;
        };
        tool = {
          editor = "nvim";
          shell = "${pkgs.bash}/bin/bash";
          pager = "less -FRX";
          fzf-preview = "bat -p --color always {-1}";
        };
        lsp.diagnostics = {
          wiki-title = "hint";
          dead-link = "error";
        };
        filter = {
          recents = "--sort created- --created-after 'last two weeks'";
        };
        alias = {
          ls = "zk list $@";
          list = "zk list --quiet $@";
          editlast = "zk edit --limit 1 --sort modified- $@";
          recent = "zk edit --sort created- --created-after 'last two weeks' --interactive";
          path = "zk list --quiet --format {{path}} --delimiter , $@";
          lucky = "zk list --quiet --format full --sort random --limit 1";
          hist = "zk list --format path --delimiter0 --quiet $@ | xargs -t -0 git log --patch --";
        };
      };
    };

    # better cd
    zoxide = {
      enable = true;
      enableNushellIntegration = true;
    };

  };

  # The home.packages option allows you to install Nix packages into your
  # environment.
  home.packages = with pkgs; [
    # # Adds the 'hello' command to your environment. It prints a friendly
    # # "Hello, world!" when run.
    # pkgs.hello

    atool                          # compression and extraction tools
    bat                            # better cat
    btop                           # tui system monitor
    carapace                       # multishell completion engine
    chafa                          # terminal image visualizer
    ctpv                           # lf previewer
    fastfetch
    fd                             # better find
    ffmpeg
    ffmpegthumbnailer
    # imagemagick
    man-pages                      # Linux man pages
    mesa                           # graphics lib
    neovide                        # graphical neovim client
    # nushellPlugins.gstat
    # nushellPlugins.query
    # nushellPlugins.skim #regex,units,highlight
    pandoc                         # markup converter
    pass                           # cli password manager #optionally: `pass-wayland` with gnome de
    # picard                         # music metadata editor
    porsmo                         # cli pomodoro app
    ripgrep                        # better grep #optionally: `ripgrep-all` for extended features
    speedtest-rs
    stow                           # symlink manager
    syncthing                      # peer-to-peer file sync
    trash-cli
    tree                           # dir viewer

    # dev libs and tools
    bacon                          # background code checker
    cargo-audit
    cargo-auditable
    cargo-binstall
    cargo-generate
    cargo-modules
    cargo-nextest
    cargo-sweep
    cargo-update
    dioxus-cli
    direnv                         # automatic invocation of shell.nix with .envrc
    # fnm                            # fast node version manager
    # go
    # unstable.jujutsu             # git-compatible version control system
    mold                           # better linker
    # pipx                           # python package manager
    # python314
    ra-multiplex                   # rust-analyzer multiplex server
    # rustup                         # rust toolchain manager
    sccache                        # build cache tool
    sqlite
    # tmux
    tokei                          # loc counter
    yq                             # cli json, yaml, and xml processor

    # # It is sometimes useful to fine-tune packages, for example, by applying
    # # overrides. You can do that directly here, just don't forget the
    # # parentheses. Maybe you want to install Nerd Fonts with a limited number of
    # # fonts?
    # (pkgs.nerdfonts.override { fonts = [ "FantasqueSansMono" ]; })

    # # You can also create simple shell scripts directly inside your
    # # configuration. For example, this adds a command 'my-hello' to your
    # # environment:
    # (pkgs.writeShellScriptBin "my-hello" ''
    #   echo "Hello, ${config.home.username}!"
    # '')
  ];

  # Home Manager is pretty good at managing dotfiles. The primary way to manage
  # plain files is through 'home.file'.
  home.file = {
    # # Building this configuration will create a copy of 'dotfiles/screenrc' in
    # # the Nix store. Activating the configuration will then make '~/.screenrc' a
    # # symlink to the Nix store copy.
    # ".screenrc".source = dotfiles/screenrc;

    # # You can also set the file content immediately.
    # ".gradle/gradle.properties".text = ''
    #   org.gradle.console=verbose
    #   org.gradle.daemon.idletimeout=3600000
    # '';
  };

  # Home Manager can also manage your environment variables through
  # 'home.sessionVariables'. If you don't want to manage your shell through Home
  # Manager then you have to manually source 'hm-session-vars.sh' located at
  # either
  #
  #  ~/.nix-profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  ~/.local/state/nix/profiles/profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  /etc/profiles/per-user/m3tam3re/etc/profile.d/hm-session-vars.sh
  #
  # home.sessionVariables = {
  #   EDITOR = "nvim";
  # };

  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;
}
